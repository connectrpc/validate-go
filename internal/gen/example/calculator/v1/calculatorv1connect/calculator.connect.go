// Copyright 2023-2025 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: example/calculator/v1/calculator.proto

package calculatorv1connect

import (
	connect "connectrpc.com/connect"
	v1 "connectrpc.com/validate/internal/gen/example/calculator/v1"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CalculatorServiceName is the fully-qualified name of the CalculatorService service.
	CalculatorServiceName = "example.calculator.v1.CalculatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalculatorServiceCumSumProcedure is the fully-qualified name of the CalculatorService's CumSum
	// RPC.
	CalculatorServiceCumSumProcedure = "/example.calculator.v1.CalculatorService/CumSum"
)

// CalculatorServiceClient is a client for the example.calculator.v1.CalculatorService service.
type CalculatorServiceClient interface {
	CumSum(context.Context) *connect.BidiStreamForClient[v1.CumSumRequest, v1.CumSumResponse]
}

// NewCalculatorServiceClient constructs a client for the example.calculator.v1.CalculatorService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalculatorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CalculatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	calculatorServiceMethods := v1.File_example_calculator_v1_calculator_proto.Services().ByName("CalculatorService").Methods()
	return &calculatorServiceClient{
		cumSum: connect.NewClient[v1.CumSumRequest, v1.CumSumResponse](
			httpClient,
			baseURL+CalculatorServiceCumSumProcedure,
			connect.WithSchema(calculatorServiceMethods.ByName("CumSum")),
			connect.WithClientOptions(opts...),
		),
	}
}

// calculatorServiceClient implements CalculatorServiceClient.
type calculatorServiceClient struct {
	cumSum *connect.Client[v1.CumSumRequest, v1.CumSumResponse]
}

// CumSum calls example.calculator.v1.CalculatorService.CumSum.
func (c *calculatorServiceClient) CumSum(ctx context.Context) *connect.BidiStreamForClient[v1.CumSumRequest, v1.CumSumResponse] {
	return c.cumSum.CallBidiStream(ctx)
}

// CalculatorServiceHandler is an implementation of the example.calculator.v1.CalculatorService
// service.
type CalculatorServiceHandler interface {
	CumSum(context.Context, *connect.BidiStream[v1.CumSumRequest, v1.CumSumResponse]) error
}

// NewCalculatorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalculatorServiceHandler(svc CalculatorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	calculatorServiceMethods := v1.File_example_calculator_v1_calculator_proto.Services().ByName("CalculatorService").Methods()
	calculatorServiceCumSumHandler := connect.NewBidiStreamHandler(
		CalculatorServiceCumSumProcedure,
		svc.CumSum,
		connect.WithSchema(calculatorServiceMethods.ByName("CumSum")),
		connect.WithHandlerOptions(opts...),
	)
	return "/example.calculator.v1.CalculatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalculatorServiceCumSumProcedure:
			calculatorServiceCumSumHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalculatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCalculatorServiceHandler struct{}

func (UnimplementedCalculatorServiceHandler) CumSum(context.Context, *connect.BidiStream[v1.CumSumRequest, v1.CumSumResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("example.calculator.v1.CalculatorService.CumSum is not implemented"))
}
